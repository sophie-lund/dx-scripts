{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":""},{"location":"#_1","title":"Intro","text":"<p>DX Scripts is a set of BASH scripts that automate common developer tasks. It's intended to be included as a submodule in your project and then used as a BASH \"library\".</p>"},{"location":"reference/aws/","title":"AWS","text":""},{"location":"reference/aws/#aws","title":"AWS","text":"<p>To use the AWS library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/aws.bash\"\n</code></pre> <p>See <code>aws.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/aws/#list_aws_environment_names","title":"<code>list_aws_environment_names</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Lists the names of all of the AWS environments configured on the local system.</p> <p>It does this by looking at the <code>~/.aws/config</code> file and filtering the names by the prefix provided.</p> <pre><code>$ list_aws_environment_names\ndevelopment\nstaging\nproduction\n</code></pre> <p>You need to provide the <code>DX_SCRIPTS_AWS_PROFILE_PREFIX</code> environment variable for this to work. It is a prefix for profiles to filter by.</p> <p>Usage: <code>list_aws_environment_names</code></p> <ul> <li><code>DX_SCRIPTS_AWS_PROFILE_PREFIX</code>: The prefix to filter the environment names by. This is usually the name of the project. (required)</li> <li><code>DX_SCRIPTS_AWS_CONFIG_PATH</code>: The path to the AWS config file. If not set, it will default to <code>~/.aws/config</code>.</li> </ul> <p>It will return:</p> <ul> <li>0 on success.</li> <li>1 if <code>DX_SCRIPTS_AWS_PROFILE_PREFIX</code> is not set.</li> <li>2 if there is no <code>~/.aws/config</code> file.</li> <li>3 if there are no profiles starting with <code>&lt;prefix&gt;</code>.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/aws/#login_to_aws_sso","title":"<code>login_to_aws_sso</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs into an AWS SSO environment.</p> <pre><code>$ login_to_aws_sso development\n</code></pre> <p>See <code>list_aws_environment_names</code> for more information on how environments are resolved.</p> <p>Usage: <code>login_to_aws_sso &lt;environment&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;environment&gt;</code>: The name of the environment to log in to.</li> </ul> <p>See <code>list_aws_environment_names</code> for more information on the environment variables used.</p> <p>See <code>list_aws_environment_names</code> for more information on the return codes. It will return:</p> <ul> <li>0 on success.</li> <li>1 if <code>DX_SCRIPTS_AWS_PROFILE_PREFIX</code> is not set. (from <code>list_aws_environment_names</code>)</li> <li>2 if there is no <code>~/.aws/config</code> file. (from <code>list_aws_environment_names</code>)</li> <li>3 if there are no profiles starting with <code>&lt;prefix&gt;</code>. (from <code>list_aws_environment_names</code>)</li> <li>4 if the environment is not found.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/aws/#login_to_aws_endpoint","title":"<code>login_to_aws_endpoint</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs into a specific local endpoint that is compatible with the AWS API.</p> <pre><code>$ login_to_aws_endpoint http://localhost:8000 us-east-1\n</code></pre> <p>This only affects the current shell, but then all AWS API calls will go to this local endpoint instead of AWS itself.</p> <p>Usage: <code>login_to_aws_endpoint &lt;endpoint url&gt; &lt;region&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;endpoint url&gt;</code>: The URL to log into.</li> <li><code>&lt;region&gt;</code>: The AWS region to use. For most endpoints, this doesn't matter.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>This function does not throw any errors.</p>"},{"location":"reference/bootstrap/","title":"Bootstrap","text":""},{"location":"reference/bootstrap/#bootstrap","title":"Bootstrap","text":"<p>To use the bootstrap library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/bootstrap.bash\"\n</code></pre> <p>See <code>bootstrap.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/bootstrap/#ensure_dependencies_installed","title":"<code>ensure_dependencies_installed</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Takes in a list of dependencies and makes sure that they are all installed on the local system.</p> <pre><code>$ ensure_dependencies_installed \\\n    dependency_xcode_cli_tools \\\n    dependency_homebrew \\\n  ;\n</code></pre> <p>See What is a dependency? for information about what <code>dependency_xcode_cli_tools</code> and <code>dependency_homebrew</code> are in this example.</p> <p>Usage: <code>ensure_dependencies_installed &lt;dependencies...&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;dependencies...&gt;</code>: A list of dependencies to check.</li> </ul> <ul> <li><code>DX_SCRIPTS_DISABLE_BOOTSTRAP_UPGRADE</code>: If set to <code>true</code>, the script will not attempt to upgrade any dependencies. This is useful for debugging or if you want to skip the upgrade process.</li> </ul> <p>It will return 0 on success and a non-zero value if anything fails.</p> <p>It will throw an error if:</p> <ul> <li>any of the dependencies are not declared correctly.</li> <li>any dependencies are listed more than once.</li> <li>dependencies are not installed in the right order.</li> </ul>"},{"location":"reference/bootstrap/#ensure_aws_profile_configured","title":"<code>ensure_aws_profile_configured</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Ensures that the provided AWS profile is configured in the <code>~/.aws/config</code> file.</p> <pre><code>$ ensure_aws_profile_configured \\\n    my-project \\\n    'https://d-xxxxxxxxxx.awsapps.com/start' \\\n    us-east-1 \\\n    AdministratorAccess \\\n    my-project-development \\\n    my-project-development\n</code></pre> <p>It will use the provided values to guide the user through the process of configuring the AWS profile.</p> <p>Usage: <code>ensure_aws_profile_configured &lt;sso session name&gt; &lt;sso start url&gt; &lt;sso region&gt; &lt;role name&gt; &lt;account name&gt; &lt;profile name&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;sso session name&gt;</code>: A name to use for the SSO session so that it may be reused in the future.</li> <li><code>&lt;sso start url&gt;</code>: The URL to use to start the SSO session.</li> <li><code>&lt;sso region&gt;</code>: The region to use for the SSO session.</li> <li><code>&lt;role name&gt;</code>: The name of the role to use for the profile.</li> <li><code>&lt;account name&gt;</code>: The name of the account to use for the profile.</li> <li><code>&lt;profile name&gt;</code>: What to call the profile.</li> </ul> <ul> <li><code>DX_SCRIPTS_AWS_CONFIG_PATH</code>: The path to the AWS config file. If not set, it will default to <code>~/.aws/config</code>.</li> </ul> <p>It will return 0 on success and a non-zero value if anything fails.</p> <p>This function does not throw any errors.</p>"},{"location":"reference/bootstrap/#ensure_etc_hosts_entries_configured","title":"<code>ensure_etc_hosts_entries_configured</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Ensures that all the provided hosts all point to localhost in the <code>/etc/hosts</code> file.</p> <pre><code>$ ensure_etc_hosts_entries_configured \\\n    api.local.my-project.com \\\n    api.internal.my-project.com\n</code></pre> <p>Usage: <code>ensure_etc_hosts_entries_configured &lt;hosts...&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;hosts...&gt;</code>: A list of hosts to check.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will return 0 on success and a non-zero value if anything fails.</p> <p>This function will exit the script and ask the user to add the entries to the <code>/etc/hosts</code> file if they are not already there.</p>"},{"location":"reference/config/","title":"Config","text":""},{"location":"reference/config/#config","title":"Config","text":"<p>To use the config library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/config.bash\"\n</code></pre> <p>See <code>config.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/config/#get_config_value","title":"<code>get_config_value</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Reads the <code>.env</code> file in the current project directory and prints the value of the specified key. If the key is not in the file, it will be read from the shell environment.</p> <pre><code>$ cat .env\nMY_CONFIG_VALUE=\"hello, world\"\n\n$ get_config_value MY_CONFIG_VALUE\nhello, world\n</code></pre> <p>Usage: <code>get_config_value &lt;key&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;key&gt;</code>: The name of the environment variable.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if the current project directory cannot be found.</p>"},{"location":"reference/config/#require_config_value","title":"<code>require_config_value</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Reads the <code>.env</code> file in the current project directory and prints the value of the specified key. If the key is not in the file, it will be read from the shell environment.</p> <p>If the key is not found or is an empty string, it will print an error message and exit the script with exit code 1.</p> <pre><code>$ cat .env\nMY_CONFIG_VALUE=\"hello, world\"\n\n$ require_config_value MY_CONFIG_VALUE\nhello, world\n</code></pre> <p>Usage: <code>require_config_value &lt;key&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;key&gt;</code>: The name of the environment variable.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if the current project directory cannot be found or if the key is nonexistent or empty.</p>"},{"location":"reference/cxx/","title":"C++","text":""},{"location":"reference/cxx/#c","title":"C++","text":"<p>To use the C++ library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/cxx.bash\"\n</code></pre> <p>See <code>cxx.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/cxx/#build_cxx","title":"<code>build_cxx</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Builds a C++ project. That uses CMake and Conan 2. It requires that:</p> <ul> <li>There is a <code>conanfile.txt</code> file in the source directory.</li> <li>There is a <code>CMakeLists.txt</code> file in the source directory.</li> </ul> <p>Usage: <code>build_cxx &lt;macro prefix&gt; &lt;source directory&gt; &lt;build directory&gt; [build mode]</code></p> <p>Options:</p> <ul> <li><code>&lt;macro prefix&gt;</code>: The prefix for macros that are used to configure the project. This function will build the C++ project with these macros defined:<ul> <li><code>&lt;macro prefix&gt;_BUILD_TESTS</code> to either <code>1</code> or <code>0</code> depending on whether tests will be compiled.</li> <li><code>&lt;macro prefix&gt;_BUILD_DEMOS</code> to either <code>1</code> or <code>0</code> depending on whether the demos will be compiled.</li> <li><code>&lt;macro prefix&gt;_ENABLE_COVERAGE</code> to either <code>1</code> or <code>0</code> depending on whether coverage instrumentation is enabled.</li> </ul> </li> <li><code>&lt;source directory&gt;</code>: The directory containing the source code.</li> <li><code>&lt;build directory&gt;</code>: The directory to build the project in. This directory will be created if it does not exist.</li> <li><code>[build mode]</code>: The build mode to use. This is optional and defaults to <code>Release</code>. The available modes are:<ul> <li><code>debug</code>: A build with debug symbols and no optimizations.</li> <li><code>debug:coverage</code>: A build with debug symbols, no optimizations, and coverage instrumentation.</li> <li><code>debug:fuzz</code>: A build with debug symbols, no optimizations, and fuzzing instrumentation.</li> <li><code>release</code>: A build with no debug symbols and optimizations enabled.</li> </ul> </li> </ul> <p>This function does not use any environment variables.</p> <p>It will return 0 if the build was successful and a non-zero value if it was not.</p> <p>It should not throw any errors unless there is an internal problem with this function.</p>"},{"location":"reference/dependencies/","title":"Dependencies","text":""},{"location":"reference/dependencies/#dependencies","title":"Dependencies","text":"<p>To use the dependencies library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/dependencies.bash\"\n</code></pre> <p>See <code>dependencies.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/dependencies/#what-is-a-dependency","title":"What is a dependency?","text":"<p>Dependencies are functions that are called by <code>ensure_dependencies_installed</code>. Each function represents a dependency that is required for the project to work correctly. They provide information about how they should be checked and installed if they are not already.</p> <p>They should be functions of the form:</p> <pre><code>function dependency_&lt;name&gt; {\n    case \"${1:-}\" in\n        \"get-name\")\n            # Print the human-readable name of the dependency.\n            printf \"My dependency\"\n            ;;\n        \"dependencies\")\n            # Print a space-separated list of any dependencies that this\n            # dependency in turn relies on.\n            #\n            # They should match the function names of the other dependencies.\n            printf \"dependency_a dependency_b\"\n            ;;\n        \"check-enabled\")\n            # Print either \"true\" or \"false\" if the dependency is enabled.\n            #\n            # You can print \"false\" here if the dependency is not required\n            # for the current system.\n            printf \"true\"\n            ;;\n        \"check-installed\")\n            # Print \"true\" if the dependency is already installed, or\n            # \"false\" otherwise.\n            printf \"false\"\n            ;;\n        \"get-install-command\")\n            # Print a command that can be used to install the dependency\n            # on the current system.\n            #\n            # Do not print anything if such a command does not exist.\n            printf \"some command\"\n            ;;\n        \"get-brew-formula\")\n            # Print the name of the Homebrew formula that can be used to\n            # install the dependency on macOS.\n            #\n            # Do not print anything if such a formula does not exist.\n            printf \"some-formula\"\n            ;;\n        \"get-apt-package\")\n            # Print the name of the APT package that can be used to\n            # install the dependency on Debian-based systems.\n            #\n            # Do not print anything if such a package does not exist.\n            printf \"some-package\"\n            ;;\n        \"get-fallback-instructions-url\")\n            # Print the URL of instructions for how to install this dependency.\n            #\n            # Do not print anything if such a URL does not exist.\n            printf \"https://example.com/install\"\n            ;;\n        \"get-fallback-instructions\")\n            # Print any fallback instructions that should be printed if the\n            # dependency cannot be installed automatically.\n            #\n            # Do not print anything if such instructions do not exist.\n            printf \"Please install this dependency manually.\"\n            ;;\n        *)\n            die \"Unknown command for dependency: '${1}'\"\n            ;;\n    esac\n}\n</code></pre>"},{"location":"reference/dependencies/#dependencies-that-are-available","title":"Dependencies that are available","text":"<p>See <code>dependencies.bash</code> for a full list.</p>"},{"location":"reference/dependency-predicates/","title":"Dependency predicates","text":""},{"location":"reference/dependency-predicates/#dependency-predicates","title":"Dependency predicates","text":"<p>To use the dependency predicates library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/dependency-predicates.bash\"\n</code></pre> <p>See <code>dependency-predicates.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/dependency-predicates/#is_linux","title":"<code>is_linux</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the current system is Linux.</p> <pre><code>$ is_linux\n</code></pre> <p>Usage: <code>is_linux</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if the system is Linux.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#is_macos","title":"<code>is_macos</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the current system is macOS.</p> <pre><code>$ is_macos\n</code></pre> <p>Usage: <code>is_macos</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if the system is macOS.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#is_host_os_supported","title":"<code>is_host_os_supported</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the current system is in a list of given OSs.</p> <pre><code>$ is_host_os_supported linux macos\n</code></pre> <p>Usage: <code>is_host_os_supported [os...]</code></p> <p>Options:</p> <ul> <li><code>[os...]</code>: A list of OSs to check against. The following OSs are supported:<ul> <li><code>linux</code></li> <li><code>macos</code></li> </ul> </li> </ul> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if the system is supported (is in the provided list).</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#does_command_exist","title":"<code>does_command_exist</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the command can be called.</p> <pre><code>$ does_command_exist ls\n</code></pre> <p>This supports binary files in the path, shell aliases, and shell functions.</p> <p>Usage: <code>does_command_exist &lt;command&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;command&gt;</code>: The command for which to check.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if the command can be called.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#are_xcode_cli_tools_installed","title":"<code>are_xcode_cli_tools_installed</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the Xcode CLI tools are installed.</p> <pre><code>$ are_xcode_cli_tools_installed\n</code></pre> <p>Usage: <code>are_xcode_cli_tools_installed</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if they are installed.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#is_xcode_installed","title":"<code>is_xcode_installed</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the Xcode desktop app is installed.</p> <pre><code>$ is_xcode_installed\n</code></pre> <p>Usage: <code>is_xcode_installed</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if it is installed.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#try_get_nvm_directory","title":"<code>try_get_nvm_directory</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Gets the NVM installation directory, if it exists.</p> <pre><code>$ try_get_nvm_directory\n/home/user/.nvm\n</code></pre> <p>Usage: <code>try_get_nvm_directory</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#is_nvm_installed","title":"<code>is_nvm_installed</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if NVM is installed.</p> <pre><code>$ is_nvm_installed\n</code></pre> <p>Usage: <code>is_nvm_installed</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if it is installed.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#is_docker_compose_2x_installed","title":"<code>is_docker_compose_2x_installed</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if Docker Compose is installed and is at least version 2.x.</p> <pre><code>$ is_docker_compose_2x_installed\n</code></pre> <p>Usage: <code>is_docker_compose_2x_installed</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if it is installed.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dependency-predicates/#are_docker_engine_metrics_enabled","title":"<code>are_docker_engine_metrics_enabled</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if Docker Engine has the metrics endpoint enabled.</p> <pre><code>$ are_docker_engine_metrics_enabled\n</code></pre> <p>Usage: <code>are_docker_engine_metrics_enabled</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will return:</p> <ul> <li><code>0</code> if they are enabled.</li> <li><code>1</code> otherwise.</li> </ul> <p>This function does not throw any errors.</p>"},{"location":"reference/dns/","title":"DNS","text":""},{"location":"reference/dns/#dns","title":"DNS","text":"<p>To use the DNS library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/dns.bash\"\n</code></pre> <p>See <code>dns.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/dns/#flush_dns_cache","title":"<code>flush_dns_cache</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Flushes the system DNS cache. It will use <code>sudo</code> if it needs root privileges.</p> <p>This function supports macOS and Linux systems that use <code>systemd</code>.</p> <p>Usage: <code>flush_dns_cache</code></p> <p>This function does not take any arguments.</p> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if the command fails.</p>"},{"location":"reference/docker/","title":"Docker","text":""},{"location":"reference/docker/#docker","title":"Docker","text":"<p>To use the Docker library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/docker.bash\"\n</code></pre> <p>See <code>docker.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/docker/#run_docker_compose","title":"<code>run_docker_compose</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Runs the <code>docker compose</code> command with forwarded arguments, but makes sure that the env file and the correct <code>docker-compose.yml</code> file are used.</p> <pre><code>run_docker_compose build\n</code></pre> <p>Usage: <code>run_docker_compose [args...]</code></p> <p>It takes any number of arguments that are forwarded to the <code>docker compose</code> command.</p> <p>For example, in this command <code>ps -a</code> are forwarded to <code>docker compose</code>:</p> <pre><code>run_docker_compose ps -a\n</code></pre> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command.</p> <p>It will exit the script with exit code 1 if:  * The env file does not exist.  * <code>COMPOSE_PROJECT_NAME</code> is not set in the env file for the project.  * <code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code> is not set in the env file for the project.</p>"},{"location":"reference/docker/#is_docker_compose_project_running","title":"<code>is_docker_compose_project_running</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Checks if the Docker Compose project is currently running. If there is at least one container running, it will consider the project to be running.</p> <pre><code>is_docker_compose_project_running\n</code></pre> <p>Usage: <code>is_docker_compose_project_running</code></p> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return 0 if the project is running and 1 if it is not running.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#docker_clean_volumes","title":"<code>docker_clean_volumes</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Deletes any volumes that are used by the project. This only works when the project is not running. It will ask for user confirmation.</p> <pre><code>docker_clean_volumes\n</code></pre> <p>Usage: <code>docker_clean_volumes</code></p> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return 0 on success and a non-zero exit code on failure, such as if the project is still running.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#docker_compose_down","title":"<code>docker_compose_down</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Brings down Docker Compose containers. It can either bring down just one container by name:</p> <pre><code>docker_compose_down my-container\n</code></pre> <p>Or all of them at once by omitting the name:</p> <pre><code>docker_compose_down\n</code></pre> <p>Usage: <code>docker_compose_down [container name]</code></p> <p>Options:</p> <ul> <li><code>[container name]</code>: The name of the container to bring down (optional).<ul> <li>If omitted, all containers will be brought down.</li> </ul> </li> </ul> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#docker_compose_up","title":"<code>docker_compose_up</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Brings up Docker Compose containers. It can either bring up just one container by name:</p> <pre><code>docker_compose_up my-container\n</code></pre> <p>Or all of them at once by omitting the name:</p> <pre><code>docker_compose_up\n</code></pre> <p>It will also re-build or pull any images that are used in the project.</p> <p>Usage: <code>docker_compose_up [container name]</code></p> <p>Options:</p> <ul> <li><code>[container name]</code>: The name of the container to bring up (optional).<ul> <li>If omitted, all containers will be brought up.</li> </ul> </li> </ul> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command. Note that multiple commands are called and it will return the first non-zero exit code.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#docker_compose_restart","title":"<code>docker_compose_restart</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Restarts Docker Compose containers. It can either restart just one container by name:</p> <pre><code>docker_compose_restart my-container\n</code></pre> <p>Or all of them at once by omitting the name:</p> <pre><code>docker_compose_restart\n</code></pre> <p>This is equivalent to calling <code>docker_compose_down</code> and then <code>docker_compose_up</code> immediately after.</p> <p>Usage: <code>docker_compose_restart [container name]</code></p> <p>Options:</p> <ul> <li><code>[container name]</code>: The name of the container to restart (optional).<ul> <li>If omitted, all containers will be restarted.</li> </ul> </li> </ul> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command. Note that multiple commands are called and it will return the first non-zero exit code.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#tail_docker_compose_logs","title":"<code>tail_docker_compose_logs</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Watches the logs of Docker Compose containers. You can either watch the logs of just one container by name:</p> <pre><code>tail_docker_compose_logs my-container\n</code></pre> <p>Or all of them at once by omitting the name:</p> <pre><code>tail_docker_compose_logs\n</code></pre> <p>Usage: <code>tail_docker_compose_logs [container name]</code></p> <p>Options:</p> <ul> <li><code>[container name]</code>: The name of the container to watch (optional).<ul> <li>If omitted, all containers will be watched.</li> </ul> </li> </ul> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#exec_docker_compose_shell","title":"<code>exec_docker_compose_shell</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Enters an interactive shell in a Docker Compose container.</p> <pre><code>exec_docker_compose_shell my-container\n</code></pre> <p>You can also pass in a command to run in the container:</p> <pre><code>exec_docker_compose_shell my-container \"echo hello, world\"\n</code></pre> <p>It must be passed in as a single string argument, like above.</p> <p>It will try to use <code>/bin/bash</code> if it is available, otherwise it will fall back to <code>/bin/sh</code>.</p> <p>Usage: <code>exec_docker_compose_shell &lt;container name&gt; [command]</code></p> <p>Options:</p> <ul> <li><code>&lt;container name&gt;</code>: The name of the container to shell into.</li> <li><code>[command]</code>: The command to run in the container (optional).<ul> <li>If omitted, an interactive shell will be opened.</li> </ul> </li> </ul> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will return the same exit status as the <code>docker compose</code> command.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p>"},{"location":"reference/docker/#print_docker_compose_status","title":"<code>print_docker_compose_status</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Prints the status of all of the containers in a Docker Compose project.</p> <pre><code>print_docker_compose_status\n</code></pre> <p>Usage: <code>print_docker_compose_status</code></p> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will always return 0.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p> <p>It will also throw an error if your terminal is less than 100 characters wide, as it will not be able to print the status correctly.</p>"},{"location":"reference/docker/#watch_docker_compose_status","title":"<code>watch_docker_compose_status</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Watches the status of all of the containers in a Docker Compose project, updating every 5 seconds.</p> <pre><code>watch_docker_compose_status\n</code></pre> <p>Usage: <code>watch_docker_compose_status</code></p> <ul> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_RELATIVE_PATH</code>: The path to the <code>docker-compose.yml</code> file relative to the current project directory. (required)</li> <li><code>DX_SCRIPTS_DOCKER_COMPOSE_ADDITIONAL_ARGS</code>: Any additional arguments to pass to the <code>docker compose</code> command. (optional)</li> </ul> <p>It will always return 0.</p> <p>See <code>run_docker_compose</code> for the errors that will throw.</p> <p>It will also throw an error if your terminal is less than 100 characters wide, as it will not be able to print the status correctly.</p>"},{"location":"reference/environment-variables/","title":"Environment variables","text":""},{"location":"reference/environment-variables/#environment-variables","title":"Environment variables","text":"<p>These environment variables can all be set to modify the behavior of these scripts.</p> Variable Description Default <code>DX_SCRIPTS_AWS_CONFIG_PATH</code> The path to the AWS config file. <code>~/.aws/config</code> <code>DX_SCRIPTS_DISABLE_BOOTSTRAP_UPGRADE</code> By default, bootstrapping will upgrade system dependencies. This adds a lot of time to CI runs so this flag exists to optionally disable it. <code>false</code> <code>DX_SCRIPTS_ALWAYS_CONSENT</code> This disables all prompts and assumes that the user has consented to all actions. <code>false</code> <code>DX_SCRIPTS_PROJECT_DIRECTORY</code> The root directory of the project."},{"location":"reference/logging/","title":"Logging","text":""},{"location":"reference/logging/#logging","title":"Logging","text":"<p>To use the logging library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_LOGGING:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/logging.bash\"\n</code></pre> <p>See <code>logging.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/logging/#log_info","title":"<code>log_info</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs an informative message to the console.</p> <pre><code>$ log_info \"This is an informative message\"\n[2025-05-04 12:06:56] [info] This is an informative message\n</code></pre> <p>Usage: <code>log_error &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to log.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The message starts with a lowercase letter.</li> <li>The message ends with a period (<code>...</code> is OK).</li> </ul>"},{"location":"reference/logging/#log_warning","title":"<code>log_warning</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs a warning message to the console.</p> <pre><code>$ log_warning \"This is a warning message\"\n[2025-05-04 12:06:56] [warning] This is a warning message\n</code></pre> <p>Usage: <code>log_error &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to log.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The message starts with a lowercase letter.</li> <li>The message ends with a period (<code>...</code> is OK).</li> </ul>"},{"location":"reference/logging/#log_error","title":"<code>log_error</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs a error message to the console. This will not exit the script.</p> <pre><code>$ log_error \"This is a error message\"\n[2025-05-04 12:06:56] [error] This is a error message\n</code></pre> <p>Usage: <code>log_error &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to log.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The message starts with a lowercase letter.</li> <li>The message ends with a period (<code>...</code> is OK).</li> </ul>"},{"location":"reference/logging/#die","title":"<code>die</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Logs a error message to the console and exits the script with exit code 1.</p> <pre><code>$ die \"This is a error message\"\n[2025-05-04 12:06:56] [error] This is a error message\n</code></pre> <p>Usage: <code>die &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to log.</li> </ul> <p>This function does not use any environment variables.</p> <p>N/A since it will always exit the script with exit code 1.</p> <p>It will exit the script with exit code 1.</p>"},{"location":"reference/logging/#run_steps","title":"<code>run_steps</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Runs a series of steps and logs their progress to the console. This is useful for long-running processes that can easily be broken down.</p> <p>It accepts a list of step functions which all have to be of this form:</p> <pre><code>function step_&lt;name&gt; {\n    case \"${1}\" in\n        \"title\")\n            printf \"&lt;title&gt;\"\n            ;;\n        \"enabled\")\n            printf \"&lt;true|false&gt;\"\n            ;;\n        \"run\")\n            # ...\n            ;;\n        *)\n            die \"Unexpected argument: ${1}\"\n            ;;\n    esac\n}\n</code></pre> <p>For example:</p> <pre><code>function step_create_file {\n    case \"${1}\" in\n        \"title\")\n            printf \"Create file\"\n            ;;\n        \"enabled\")\n            printf \"true\"\n            ;;\n        \"run\")\n            touch file.txt\n            ;;\n        *)\n            die \"Unexpected argument: ${1}\"\n            ;;\n    esac\n}\n\nfunction step_delete_file {\n    case \"${1}\" in\n        \"title\")\n            printf \"Delete file\"\n            ;;\n        \"enabled\")\n            printf \"true\"\n            ;;\n        \"run\")\n            rm file.txt\n            ;;\n        *)\n            die \"Unexpected argument: ${1}\"\n            ;;\n    esac\n}\n\n$ run_steps \\\n    step_create_file \\\n    step_delete_file \\\n;\n\n[2025-05-04 12:06:56] [1/2] Create file\n[2025-05-04 12:06:56] [2/2] Delete file\n</code></pre> <p>You can also disable some of the steps by using their <code>\"enabled\"</code> cases. For example:</p> <pre><code>function step_create_file {\n    case \"${1}\" in\n        \"title\")\n            printf \"Create file\"\n            ;;\n        \"enabled\")\n            printf \"true\"\n            ;;\n        \"run\")\n            touch file.txt\n            ;;\n        *)\n            die \"Unexpected argument: ${1}\"\n            ;;\n    esac\n}\n\nfunction step_delete_file {\n    case \"${1}\" in\n        \"title\")\n            printf \"Delete file\"\n            ;;\n        \"enabled\")\n            if [[ \"${PRESERVE_FILE:-}\" == \"true\" ]]; then\n                printf \"false\"\n            else\n                printf \"true\"\n            fi\n            ;;\n        \"run\")\n            rm file.txt\n            ;;\n        *)\n            die \"Unexpected argument: ${1}\"\n            ;;\n    esac\n}\n\n$ PRESERVE_FILE=true run_steps \\\n    step_create_file \\\n    step_delete_file \\\n;\n\n[2025-05-04 12:06:56] [1/1] Create file\n</code></pre> <p>Only <code>step_create_file</code> is run - and this is reflected in the number of steps printed to the console.</p> <p>Usage: <code>run_steps &lt;steps...&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;steps...&gt;</code>: A list of function names to be run as steps.</li> </ul> <p>Each step function must accept one argument which may be any of <code>\"title\"</code>, <code>\"enabled\"</code>, or <code>\"run\"</code>.</p> <ul> <li><code>\"title\"</code> must print a string which will be printed to the console as the message.</li> <li><code>\"enabled\"</code> must print a string which is either <code>\"true\"</code> or <code>\"false\"</code>. This will determine if the step is run or not.</li> <li><code>\"run\"</code> is where the actual work is done. This function will be run if the <code>\"enabled\"</code> case returns <code>\"true\"</code>. </li> </ul> <p>This function does not use any environment variables.</p> <p>It will return 0 if all steps are run successfully, otherwise it will return the error return code of the failed step.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>A <code>\"enabled\"</code> call prints a string that is not <code>\"true\"</code> or <code>\"false\"</code>.</li> <li>A step is not a function.</li> </ul>"},{"location":"reference/prompts/","title":"Prompts","text":""},{"location":"reference/prompts/#prompts","title":"Prompts","text":"<p>To use the prompts library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/prompts.bash\"\n</code></pre> <p>See <code>prompts.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/prompts/#confirm_user_consent_neutral","title":"<code>confirm_user_consent_neutral</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Asks the user to confirm their consent.</p> <p>This requires them to type in either <code>y</code> or <code>n</code> (case insensitive) to confirm their consent. Pressing enter alone will not work.</p> <pre><code>$ confirm_user_consent_neutral \"Are you sure you want to proceed?\"\nAre you sure you want to proceed? [y/n]\n</code></pre> <p>If the user does not consent, it will simply exit the script with exit code 1 so that you do not have to handle the result with an if statement.</p> <p>Usage: <code>confirm_user_consent_neutral &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to print to the user - this is usually a question.</li> </ul> <ul> <li><code>DX_SCRIPTS_ALWAYS_CONSENT</code>: If set to <code>\"true\"</code>, the script will always consent to the prompt. This is useful for testing or if you want to skip the prompt in certain situations.</li> </ul> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The user did not consent.</li> </ul>"},{"location":"reference/prompts/#confirm_user_consent_safe","title":"<code>confirm_user_consent_safe</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Asks the user to confirm their consent.</p> <p>This requires them to type in either <code>y</code>, <code>n</code>, or just press enter to confirm their consent (case insensitive).</p> <p><code>y</code> is the default option.</p> <pre><code>$ confirm_user_consent_safe \"Are you sure you want to proceed?\"\nAre you sure you want to proceed? [Y/n]\n</code></pre> <p>If the user does not consent, it will simply exit the script with exit code 1 so that you do not have to handle the result with an if statement.</p> <p>Usage: <code>confirm_user_consent_safe &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to print to the user - this is usually a question.</li> </ul> <ul> <li><code>DX_SCRIPTS_ALWAYS_CONSENT</code>: If set to <code>\"true\"</code>, the script will always consent to the prompt. This is useful for testing or if you want to skip the prompt in certain situations.</li> </ul> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The user did not consent.</li> </ul>"},{"location":"reference/prompts/#confirm_user_consent_dangerous","title":"<code>confirm_user_consent_dangerous</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Asks the user to confirm their consent.</p> <p>This requires them to type in either <code>y</code>, <code>n</code>, or just press enter to revoke their consent (case insensitive).</p> <p><code>n</code> is the default option.</p> <pre><code>$ confirm_user_consent_dangerous \"Are you sure you want to proceed?\"\nAre you sure you want to proceed? [y/N]\n</code></pre> <p>If the user does not consent, it will simply exit the script with exit code 1 so that you do not have to handle the result with an if statement.</p> <p>Usage: <code>confirm_user_consent_dangerous &lt;message&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;message&gt;</code>: The message to print to the user - this is usually a question.</li> </ul> <ul> <li><code>DX_SCRIPTS_ALWAYS_CONSENT</code>: If set to <code>\"true\"</code>, the script will always consent to the prompt. This is useful for testing or if you want to skip the prompt in certain situations.</li> </ul> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if:</p> <ul> <li>The message is empty.</li> <li>The user did not consent.</li> </ul>"},{"location":"reference/recommended-script-structure/","title":"Recommended script structure","text":""},{"location":"reference/recommended-script-structure/#recommended-script-structure","title":"Recommended script structure","text":"<p>Putting this at the top of your scripts is recommended in order to follow BASH scripting best practices:</p> <pre><code>#!/bin/bash\n\n# Standard prelude - put this at the top of all scripts\n# --------------------------------------------------------------------------------------------------\n\n# Get the directory of the current script\nSCRIPT_DIRECTORY=\"$(cd -- \"$(dirname -- \"${BASH_SOURCE[0]}\")\" &amp;&gt; /dev/null &amp;&amp; pwd)\"\nreadonly SCRIPT_DIRECTORY\n\n# Set flags\nset -o errexit # abort on nonzero exit status\nset -o nounset # abort on unbound variable\nset -o pipefail # don't hide errors within pipes\n\n# Ensure that the script is not sourced and is run as a command\nif [[ \"$0\" != \"${BASH_SOURCE[0]}\" ]]; then\n    printf \"error: script cannot be sourced\\n\"\n    exit 1\nfi\n\n# Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# ...\n\n# Main function\n# --------------------------------------------------------------------------------------------------\n\nfunction main {\n    # ...\n}\n\nmain\n</code></pre> <p>See the other pages in the reference guide for what to put in the <code># Source dependencies</code> section. See <code>bootstrap.bash</code> for a full example of a script that uses this structure.</p>"},{"location":"reference/recommended-script-structure/#justfiles","title":"Justfiles","text":"<p>If you are using Just, then it is recommended to structure your recipes like this:</p> <pre><code>example:\n    #!/usr/bin/env bash\n    set -eu\n\n    [[ -z \"${SCRIPT_DIRECTORY_LOGGING:-}\" ]] &amp;&amp; \\\n        . \"./scripts/dx-scripts/lib/logging.bash\"\n\n    log_info \"Hello, world\"\n</code></pre> <p>This assumes that you have <code>dx-scripts</code> cloned in your project at <code>scripts/dx-scripts</code> - which is recommended as well. See <code>justfile</code> for a full example of a Justfile that uses this structure.</p>"},{"location":"reference/utilities/","title":"Utilities","text":""},{"location":"reference/utilities/#utilities","title":"Utilities","text":"<p>To use the utilities library, add this to <code># Source dependencies</code> part of your script:</p> <pre><code># Source dependencies\n# --------------------------------------------------------------------------------------------------\n\n# Check if the scripts have already been sourced using their\n# 'SCRIPT_DIRECTORY_*' variables\n\n[[ -z \"${SCRIPT_DIRECTORY_PROMPTS:-}\" ]] &amp;&amp; \\\n    . \"${SCRIPT_DIRECTORY}/lib/utilities.bash\"\n</code></pre> <p>See <code>utilities.bash</code> for the full implementations of these functions.</p>"},{"location":"reference/utilities/#print_output_on_error","title":"<code>print_output_on_error</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Runs a command and silences the output unless it exits with a non-zero exit code. Then it will print the command's combined output to <code>stdout</code> and <code>stderr</code> both to both<code>stdout</code>.</p> <pre><code>$ print_output_on_error ls /\n\n$ print_output_on_error ls /nonexistant\n\"/nonexistant\": No such file or directory (os error 2)\n</code></pre> <p>Usage: <code>print_output_on_error &lt;command...&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;command...&gt;</code>: The command to run, as-is. Note that pipes will not be included in the command by default.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will return 0 if the command succeeds, and 1 if it fails.</p> <p>This function does not throw any errors.</p>"},{"location":"reference/utilities/#capture_command_output","title":"<code>capture_command_output</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Runs a command and captures both the output to <code>stdout</code> and the exit status. <code>stderr</code> is not captured.</p> <p>It will set two global variables:</p> <ul> <li><code>CAPTURE_STDOUT</code>: The output of the command.</li> <li><code>CAPTURE_EXIT_STATUS</code>: The exit status of the command.</li> </ul> <p>You have to use the values of those variables before this functionsi called again, as they will be overwritten.<sup>1</sup></p> <pre><code>$ capture_command_output ls /\n\n$ echo $CAPTURE_STDOUT\n/Applications\n/cores\n/etc\n...\n\n$ echo $CAPTURE_EXIT_STATUS\n0\n</code></pre> <p>Usage: <code>capture_command_output &lt;command...&gt;</code></p> <p>Options:</p> <ul> <li><code>&lt;command...&gt;</code>: The command to run, as-is. Note that pipes will not be included in the command by default.</li> </ul> <p>This function does not use any environment variables.</p> <p>It will always return 0.</p> <p>This function does not throw any errors.</p>"},{"location":"reference/utilities/#get_current_project_directory","title":"<code>get_current_project_directory</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>It finds and prints the current project directory. It looks for the highest-level Git repository relative to the <code>utilities.bash</code> script directory. If a parent Git repository is a submodule, it will find the parent Git repository.</p> <p>You can override the value returned by this function by setting the environment variable <code>DX_SCRIPTS_PROJECT_DIRECTORY</code>.</p> <pre><code>$ get_current_project_directory\n/home/user/project\n\n$ DX_SCRIPTS_PROJECT_DIRECTORY=/here get_current_project_directory\n/here\n</code></pre> <p>This function takes no arguments.</p> <ul> <li><code>DX_SCRIPTS_PROJECT_DIRECTORY</code>: Can be used to override the current project directory. If set, it will be used instead of the Git repository.</li> </ul> <p>It will always return 0.</p> <p>It will exit the script with exit code 1 if the current project directory cannot be found.</p>"},{"location":"reference/utilities/#clean_git_ignored","title":"<code>clean_git_ignored</code>","text":"DescriptionUsageEnvironment variablesReturn codesErrors <p>Deletes all files in the current project directory (see [<code>get_current_project_directory](#get_current_project_directory)]) that are ignored in the Git repository via</code>.gitignore`.</p> <p>It will ask the user to confirm before they are deleted.</p> <pre><code>$ clean_git_ignored\n[2025-05-04 12:06:56] [warning] The following files are ignored by Git and will be removed:\n  \"some/file.txt\"\n  \"some/other/file.txt\"\nAre you sure you want to remove these files? [y/N] y\n[2025-05-04 12:06:56] [info] Clean successful\n</code></pre> <p>This function takes no arguments.</p> <p>This function does not use any environment variables.</p> <p>It will always return 0 unless there is an error with <code>git</code>.</p> <p>It will exit the script with exit code 1 if the current project directory cannot be found.</p> <ol> <li> <p>I know this is bad coding practice, but it's a utility function that isn't used a ton so like... forgive me cause I'm cute?.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/adding-to-your-project/","title":"Adding to your project","text":""},{"location":"tutorial/adding-to-your-project/#adding-dx-scripts-to-your-project","title":"Adding DX Scripts to your project","text":""},{"location":"tutorial/adding-to-your-project/#add-the-git-submodule","title":"Add the Git submodule","text":"<p>The first step is to add it as a submodule. It's recommended to place it under <code>scripts/dx-scripts</code> like this, but not required:</p> <pre><code>mkdir -p scripts\n\ngit submodule add https://github.com/sophie-lund/dx-scripts.git scripts/dx-scripts\n</code></pre> <p>Then, add this line to your <code>.gitmodules</code> file:</p> <pre><code>[submodule \"scripts/dx-scripts\"]\n    path = scripts/dx-scripts\n    url = https://github.com/sophie-lund/dx-scripts.git\n    fetchRecurseSubmodules = false\n</code></pre> <p>This will prevent Git from also fetching DX Scripts' submodules which are not needed for consumers of DX Scripts and will just clutter up your repository.</p>"},{"location":"tutorial/adding-to-your-project/#write-a-bootstrap-script","title":"Write a bootstrap script","text":"<p>Instead of giving instructions on what dependencies to install, just add a <code>bootstrap.bash</code> script and tell users to run that!</p> <p>Here is an example of a simple script:</p> <pre><code>#!/bin/bash\n\n# Source the relevant libraries in DX Scripts\n. \"scripts/dx-scripts/lib/bootstrap.bash\"\n. \"scripts/dx-scripts/lib/dependencies.bash\"\n\nensure_dependencies_installed \\\n    dependency_xcode_cli_tools \\\n    dependency_git \\\n    dependency_homebrew \\\n    dependency_just\n</code></pre> <p>Here's a breakdown of what's going on:</p> <ul> <li> <p>We source two library files:</p> <ul> <li><code>bootstrap.bash</code>: This gives us <code>ensure_dependencies_installed</code> which we can use to make sure certain dependencies are installed.</li> <li><code>dependencies.bash</code>: This gives us the actual dependencies like <code>dependency_xcode_cli_tools</code> and <code>dependency_git</code>. These are included definitions for how to automatically install those dependencies on the user's system.</li> </ul> </li> <li> <p>We call <code>ensure_dependencies_installed</code> which does the work of actually installing those dependencies.</p> </li> </ul> <p>You can do more or less anything in this script. Take a look at DX Scripts' <code>bootstrap.bash</code> for an example - it's a bit more complex, but not by much.</p>"}]}